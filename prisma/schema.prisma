// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
  SERVICE_PROVIDER
}

model Role {
  id             String        @id @default(cuid())
  displayName    String // Human-readable name (e.g., "Store Manager")
  roleName       String        @unique // System name (e.g., "store_manager")
  description    String?
  permissions    String[] // Array of permission strings
  users          User[]        @relation("UserRoles")
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([roleName])
}

model User {
  id               String        @id @default(cuid())
  name             String
  firstName        String
  lastName         String
  phone            String        @unique
  email            String        @unique
  emailVerified    DateTime?
  isDisabled       Boolean       @default(false)
  image            String?
  jobTitle         String?
  locationName     String?
  roles            Role[]        @relation("UserRoles") // Updated to support multiple roles
  // role          UserRole  @default(USER)
  password         String?
  status           Boolean       @default(true)
  accounts         Account[]
  sessions         Session[]
  savings          Saving[]
  blogs            Blog[]
  isVerfied        Boolean       @default(false)
  token            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  roleId           String?
  country          String?
  state            String?
  city             String?
  address          String?
  organizationName String?
  Organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId   String?
  location         Location?     @relation(fields: [locationId], references: [id])
  locationId       String?
}

model Location {
  id             String        @id @default(cuid())
  name           String
  type           LocationType
  address        String?
  phone          String?
  email          String?
  isActive       Boolean       @default(true)
  users          User[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Item {
  id                String         @id @default(cuid())
  name              String
  slug              String         @unique
  sku               String         @unique
  barcode           String?
  description       String?
  categoryId        String?
  salesCount        Int            @default(0)
  salesTotal        Float          @default(0)
  category          Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  costPrice         Float          @default(0)
  sellingPrice      Float          @default(0)
  quantity          Int            @default(0)
  minStockLevel     Int            @default(0)
  maxStockLevel     Int?           @default(0)
  isActive          Boolean        @default(true)
  isPublished       Boolean        @default(false)
  isSerialTracked   Boolean        @default(false)
  dimensions        String?
  weight            Float?
  upc               String?
  ean               String?
  mpn               String?
  isbn              String?
  thumbnail         String?
  imageUrls         String[]
  unitOfMeasure     String? //unit name
  brandName         String?
  tax               Float? //tax rate
  unit              Unit?          @relation(fields: [unitId], references: [id])
  unitId            String?
  brand             Brand?         @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId           String?
  taxRate           taxRate?       @relation(fields: [taxRateId], references: [id])
  taxRateId         String?
  suppliers         Supplier[]     @relation("ItemSuppliers")
  supplierRelations ItemSupplier[]
  SerialNumber      SerialNumber[]
  Organization      Organization?  @relation(fields: [organizationId], references: [id])
  organizationId    String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@unique([slug, organizationId])
  @@unique([sku, organizationId])
}

enum LocationType {
  SHOP
  WAREHOUSE
  OFFICE
  VIRTUAL
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  country     String?
  currency    String?
  timezone    String?
  startDate   DateTime     @default(now())
  fisicalYear String?
  users       User[]
  invitations Invitation[]
  units       Unit[]
  brands      Brand[]
  categories  Category[]
  items       Item[]
  suppliers   Supplier[]
  locations   Location[]
  taxRates    taxRate[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Role        Role[]
}

model Invitation {
  id             String       @id @default(cuid())
  email          String       @unique
  status         Boolean      @default(false)
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("invitations")
}

model Category {
  id            String     @id @default(cuid())
  title         String
  slug          String     @unique
  imageUrl      String?
  description   String?
  parentId      String?
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategories")
  items         Item[]

  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Unit {
  id        String    @id @default(cuid())
  title     String    @unique
  symbol    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  items          Item[]
  itemId         String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Brand {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  items          Item[]
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

//suppliers model
model Supplier {
  id           String    @id @default(cuid())
  name         String
  email        String?
  phone        String?
  address      String?
  taxId        String?
  paymentTerms String?
  notes        String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  // purchaseOrders PurchaseOrder[]
  items             Item[]         @relation("ItemSuppliers")
  supplierRelations ItemSupplier[]
  Organization      Organization?  @relation(fields: [organizationId], references: [id])
  organizationId    String?
}

model ItemSupplier {
  id               String    @id @default(cuid())
  itemId           String
  supplierId       String
  isPreferred      Boolean   @default(false)
  supplierSku      String?
  leadTime         Int?
  minOrderQty      Int?
  unitCost         Float?
  lastPurchaseDate DateTime?
  notes            String?
  item             Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  supplier         Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  @@unique([itemId, supplierId])
}

model taxRate {
  id        String    @id @default(cuid())
  name      String
  rate      Float
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  items          Item[]
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model SerialNumber {
  id              String       @id @default(cuid())
  serialNumber    String
  itemId          String
  status          SerialStatus @default(IN_STOCK)
  locationId      String?
  purchaseOrderId String?
  salesOrderId    String?
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime?    @updatedAt

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

enum SerialStatus {
  IN_STOCK
  SOLD
  RETURNED
  DAMAGED
  LOST
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Saving {
  id          String    @id @default(cuid())
  amount      Int
  month       String
  name        String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentDate DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Blog {
  id            String       @id @default(cuid())
  title         String
  slug          String       @unique
  description   String?      @db.Text // Meta description for SEO
  thumbnail     String?
  content       String?      @db.Text
  published     Boolean?     @default(false)
  featured      Boolean?     @default(false)
  author        User         @relation(fields: [authorId], references: [id])
  authorId      String
  authorName    String
  authorImage   String?
  authorTitle   String?
  category      BlogCategory @relation(fields: [categoryId], references: [id])
  categoryId    String
  categoryTitle String
  readingTime   Int? // Estimated reading time in minutes
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model BlogCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
